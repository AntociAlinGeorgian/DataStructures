#include<iostream>
#include<stdio.h>

struct AVL {
	int info;
	int gradEchilibru;
	AVL* stanga;
	AVL* dreapta;
};

AVL* creareNod(int info) {
	AVL* nod = new AVL;
	nod->info = info;
	nod->gradEchilibru = 0;
	nod->dreapta = NULL;
	nod->stanga = NULL;
	return nod;
}

int maxim(int a, int b) {
	return a > b ? a : b;
}

int inaltimeArbore(AVL* arbore) {
	if (arbore) {
		return 1 + maxim(inaltimeArbore(arbore->dreapta), inaltimeArbore(arbore->stanga));
	}
	else {
		return 0;
	}
}

void calculGradEchilibru(AVL* nod) {
	if (nod) {
		nod->gradEchilibru = inaltimeArbore(nod->dreapta) - inaltimeArbore(nod->stanga);
	}
}

//rotiri simple
AVL* rotireSimplaDreapta(AVL* pivot, AVL* fiuStanga) {
	pivot->stanga = fiuStanga->dreapta;
	fiuStanga->dreapta = pivot;
	calculGradEchilibru(pivot);
	calculGradEchilibru(fiuStanga);
	return fiuStanga;
}

AVL* rotireSimplaStanga(AVL* pivot, AVL* fiuDreapta) {
	pivot->dreapta=fiuDreapta->stanga;
	fiuDreapta->stanga = pivot;
	calculGradEchilibru(pivot);
	calculGradEchilibru(fiuDreapta);
	return fiuDreapta;
}

//rotiri duble
AVL* rotireDublaDreapta(AVL* pivot, AVL* fiuDreapta) {
	pivot->dreapta = rotireSimplaDreapta(fiuDreapta, fiuDreapta->stanga);
	calculGradEchilibru(pivot);

	fiuDreapta = pivot->dreapta;
	fiuDreapta = rotireSimplaStanga(pivot, fiuDreapta);
	calculGradEchilibru(fiuDreapta);

	return fiuDreapta;
}

AVL* rotireDublaStanga(AVL* pivot, AVL* fiuStanga) {
	pivot->stanga = rotireSimplaStanga(fiuStanga, fiuStanga->dreapta);
	calculGradEchilibru(pivot);

	fiuStanga = pivot->stanga;
	fiuStanga = rotireSimplaDreapta(pivot, fiuStanga);
	calculGradEchilibru(fiuStanga);
	
	return fiuStanga;
}

//echilibrare
void echilibrare(AVL*& arbore) {
	calculGradEchilibru(arbore);

	if (arbore->gradEchilibru == 2) {
		if (arbore->dreapta->gradEchilibru == -1) {
			arbore = rotireDublaDreapta(arbore, arbore->dreapta);
		}
		else if (arbore->dreapta->gradEchilibru == 1) {
			arbore = rotireSimplaStanga(arbore, arbore->dreapta);
		}
	}
	else if (arbore->gradEchilibru == -2) {
		if (arbore->stanga->gradEchilibru == 1) {
			arbore = rotireDublaStanga(arbore, arbore->stanga);
		}
		else if (arbore->stanga->gradEchilibru == -1) {
			arbore = rotireSimplaDreapta(arbore, arbore->stanga);
		}
	}
}


void inserareNod(AVL*& arbore, int info) {
	if (arbore) {
		if (arbore->info > info) {
			inserareNod(arbore->stanga, info);
		}
		else if (arbore->info < info) {
			inserareNod(arbore->dreapta, info);
		}
		else {
			printf("Deja existent!\n");
		}
	}
	else {
		arbore = creareNod(info);
	}
	echilibrare(arbore);
}

void parcurgere(AVL* arbore) {
	if (arbore) {
		parcurgere(arbore->stanga);
		printf("%d [g.e: %d]\n", arbore->info, arbore->gradEchilibru);
		parcurgere(arbore->dreapta);
	}
}

void citireFisier(AVL*& arbore) {
	FILE* f = fopen("Text.txt", "r");
	if (f) {
		while (!feof(f)) {
			int aux;
			fscanf(f, "%d", &aux);
			inserareNod(arbore, aux);
		}
		fclose(f);
	}
}

void main() {
	AVL* arbore = NULL;
	citireFisier(arbore);
	parcurgere(arbore);
}

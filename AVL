#include "stdio.h" 
#include "stdlib.h" 
#include "string.h"  

struct AVL {
	int gradEchilibru;
	int infoUtil;
	AVL* left;
	AVL* right;
};

AVL* creareNodAVL(int info) {
	AVL* nod = (AVL*)malloc(sizeof(AVL));
	nod->gradEchilibru = 0;
	nod->infoUtil = info;
	nod->left = NULL;
	nod->right = NULL;
	return nod;
}

int max(int a, int b) {
	return (a > b) ? a : b;
}

int inaltimeArbore(AVL* arbore) {
	if (arbore) {
		return 1 + max(inaltimeArbore(arbore->left), inaltimeArbore(arbore->right));
	}
	else
		return 0;
}

void calculGradEchilibru(AVL* nod) {
	if (nod) {
		nod->gradEchilibru = inaltimeArbore(nod->right) - inaltimeArbore(nod->left);
	}
}


AVL* rotireSimplaDreapta(AVL* pivot, AVL* fiuStanga) {
	pivot->left = fiuStanga->right;
	calculGradEchilibru(pivot);
	fiuStanga->right = pivot;
	calculGradEchilibru(fiuStanga);
	return fiuStanga;
}

AVL* rotireSimplaStanga(AVL* pivot, AVL* fiuDreapta) {
	pivot->right = fiuDreapta->left;
	calculGradEchilibru(pivot);
	fiuDreapta->left = pivot;
	calculGradEchilibru(fiuDreapta);
	return fiuDreapta;
}

AVL* rotireDublaStangaDreapta(AVL* pivot, AVL* fiuStanga) {
	pivot->left = rotireSimplaStanga(fiuStanga, fiuStanga->right);
	calculGradEchilibru(pivot);  fiuStanga = pivot->left;
	fiuStanga = rotireSimplaDreapta(pivot, fiuStanga);
	calculGradEchilibru(fiuStanga);
	return fiuStanga;
}

AVL* rotireDublaDreaptaStanga(AVL* pivot, AVL* fiuDreapta) {
	pivot->right = rotireDublaDreaptaStanga(fiuDreapta, fiuDreapta->left);
	calculGradEchilibru(pivot);
	fiuDreapta = pivot->right;
	fiuDreapta = rotireSimplaStanga(pivot, fiuDreapta);
	calculGradEchilibru(fiuDreapta);
	return fiuDreapta;
}

// FUNCTIE PENTRU ECHILIBRAREA ARBORELUI
void echilibrare(AVL*& arbore) {

	calculGradEchilibru(arbore);
	if (arbore->gradEchilibru == 2) {
		if (arbore->right->gradEchilibru == -1)
			//dezechilibru stanga dreapta   
			arbore = rotireDublaDreaptaStanga(arbore, arbore->right);
		else
			//dezechilibru stanga   
			arbore = rotireSimplaStanga(arbore, arbore->right);
	}
	else if (arbore->gradEchilibru == -2) {
		if (arbore->left->gradEchilibru == 1)
			arbore = rotireDublaStangaDreapta(arbore, arbore->left);
		else
			arbore = rotireSimplaDreapta(arbore, arbore->left);
	}
}


AVL* inserareNod(AVL* arbore, int infoNou) {

	if (arbore) {
		if (arbore->infoUtil > infoNou)
			arbore->left = inserareNod(arbore->left, infoNou);
		else if (arbore->infoUtil < infoNou)
			arbore->right = inserareNod(arbore->right, infoNou);
		else
			printf("\nNodul exista in lista! Nu il poti insera din nou! \n");
	}
	else
		arbore = creareNodAVL(infoNou);
	echilibrare(arbore);
	return arbore;
}
// 6. parcurgere 
void parcurgereInOrdine(AVL* arbore) {
	if (arbore) {
		parcurgereInOrdine(arbore->left);
		printf("Nod %d - echilibrare %d\n", arbore->infoUtil, arbore->gradEchilibru);
		parcurgereInOrdine(arbore->right);
	}
}
// 7. cautare in AVL
void cautare(AVL* arbore, int valCautata) {
	if (arbore) {
		if (arbore->infoUtil > valCautata)
			cautare(arbore->left, valCautata);
		else if (arbore->infoUtil < valCautata)
			cautare(arbore->right, valCautata);
		else
			printf("\n\n\nNodul catat este %d - echilibrare %d\n", arbore->infoUtil, arbore->gradEchilibru);
	}
}
// 8. stergere cu reechilibrare 
//stergere pentru 2 descendenti 
void stergereLogica(AVL*& radacina, AVL*& sleft) {
	//caut cel mai mare nod din subarborele stang  
	if (sleft->right)
		stergereLogica(radacina, sleft->right);
	else {
		radacina->infoUtil = sleft->infoUtil;
		AVL* nodTmp = sleft;
		sleft = sleft->left;
		free(sleft);
		free(nodTmp);
	}
}
//stergere 
void stergereNodArbore(AVL*& arbore, int cheie) {
	if (arbore) {
		if (arbore->infoUtil > cheie)
			stergereNodArbore(arbore->left, cheie);
		else   if (arbore->infoUtil < cheie)
			stergereNodArbore(arbore->right, cheie);
		else {
			//1.este nod frunza=>nu are niciun descendent    
			if (arbore->right == NULL && arbore->left == NULL) {
				//dezaloc memoria de jos in sus si apoi anunt ca nodul a devenit null   
				free(arbore);
				arbore = NULL;
			}
			else
				//2.sterg nod cu un descendent    
			{
				if (arbore->left != NULL && arbore->right == NULL) {
					//salvez noodul ce treb sters intr-un tmp      
					AVL* sters = arbore;
					//construiesc leg pe stanga sa nu pierd copilul nodului pe care vreau sa l sterg     
					arbore = arbore->left;
					free(sters);
				}
				else if (arbore->left == NULL && arbore->right != NULL) {
					AVL* stergere = arbore;
					arbore = arbore->right;
					free(stergere);
				}
				else
					//3.sterge nod cu doi descendenti    
				{
					stergereLogica(arbore, arbore->left);
				}

			}
		}   echilibrare(arbore);
	}
}


void citireFisier(AVL*& arbore) {
	FILE* file = fopen("Text.txt", "r");
	int valoare;
	if (file) {
		while (!feof(file)) {
			fscanf(file, "%d", &valoare);
			arbore = inserareNod(arbore, valoare);
		}
	}  fclose(file);
}

void main() {
	AVL* arbore = NULL;
	citireFisier(arbore);
	parcurgereInOrdine(arbore);
}
